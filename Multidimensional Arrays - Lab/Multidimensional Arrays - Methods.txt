private  static  int[][] readMatrix(Scanner scanner){
        int[] rowsAndCols = readArray(scanner);

        int rows = rowsAndCols[0];
        int cols = rowsAndCols[1];

        int[][] matrix = new int[rows][cols];

        for (int r = 0; r < rows; r++) {
            matrix[r] = readArray(scanner);
        }
        return matrix;

    }

    private  static  void printMatrix(int[][] matrix){
        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix[row].length; col++) {
                System.out.print(matrix[row][col] + " ");
            }
            System.out.println();
        }
    }

    private static int[] readArray(Scanner scanner) {
        return Arrays.stream(scanner.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt).toArray();
    }


// read Matrix

	for (int row = 0; row < rows; row++) {
            int[] arr = Arrays.stream(scanner.nextLine().split("\\s+"))
                    .mapToInt(Integer::parseInt)
                    .toArray();
            matrix[row] = arr;
        }

//read char Matrix

	for (int row = 0; row < rows; row++) {
            firstMatrix[row] = scanner.nextLine()
                    .replaceAll("\\s+", "").toCharArray();
        }


// sum of diagonals

	int sumPrimaryDiagonal = 0;

        while (row < n && col < n) {
            sumPrimaryDiagonal += matrix[row++][col++];
        }

        int sumSecondaryDiagonal = 0;

        for (int i = 0; i < n; i++) {
            sumSecondaryDiagonal += matrix[i][col - 1 - i];
        }

//method to find max sum of matrix 3x3

private static int findSum(int[] vector, int[][] matrix) {
        int sum = 0;
        for (int row = vector[0]; row < vector[0] + 3; row++) {
            for (int col = vector[1]; col < vector[1] + 3; col++) {
                sum += matrix[row][col];
            }
        }
        return sum;
    }

//print matrix 3x3 after find max sum

private static void printMatrix(int[] vector, int[][] matrix) {
        for (int row = vector[0]; row < vector[0] + 3; row++) {
            for (int col = vector[1]; col < vector[1] + 3; col++) {
                System.out.print(String.format("%d ", matrix[row][col]));
            }
            System.out.println();
        }
    }

//swap elements(row1, col1, row2, col2)

String pattern = "^swap (\\d+) (\\d+) (\\d+) (\\d+)$"; 
// Regex is used because there is a test with invalid number

        Pattern patternCompile = Pattern.compile(pattern);
        String cmd = scanner.nextLine();
        while (!"END".equals(cmd)) {
            boolean isValid = true;
            Matcher matcher = patternCompile.matcher(cmd);
            if (matcher.matches()) {
                int row1 = Integer.parseInt(matcher.group(1));
                int col1 = Integer.parseInt(matcher.group(2));
                int row2 = Integer.parseInt(matcher.group(3));
                int col2 = Integer.parseInt(matcher.group(4));
                boolean isInArray = row1 >= 0 && row1 < rowSize 
				&& row2 >= 0 && row2 < rowSize
                     	   	&& col1 >= 0 && col1 < colSize 
				&& col2 >= 0 && col2 < colSize;
                if (isInArray) {
                    String temp = arr[row1][col1];
                    arr[row1][col1] = arr[row2][col2];
                    arr[row2][col2] = temp;
                    printArray(arr);
                } else {
                    isValid = false;
                }

            } else {
                isValid = false;
            }
            if (!isValid) {
                System.out.println("Invalid input!");
            }
            cmd = scanner.nextLine();
        }

//rotationMatrix

 public static char[][] rotateMatrix90(char[][] matrix) {
        int rows = matrix[0].length;
        int cols = matrix.length;

        char[][] rotated90 = new char[rows][cols];

        for (int row = 0; row < matrix.length ; row++) {
            for (int col = 0; col < matrix[row].length; col++) {
                char symbol = matrix[row][col];
                rotated90[col][cols - row - 1] = symbol;
            }
        }

        return rotated90;
    }

    public static char[][] rotateMatrix180(char[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        char[][] rotated180 = new char[rows][cols];

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                char symbol = matrix[row][col];
                rotated180[rows - row - 1][cols - col - 1] = symbol;
            }
        }

        return rotated180;
    }

    public static char[][] rotateMatrix270(char[][] matrix) {
        int rows = matrix[0].length;
        int cols = matrix.length;

        char[][] rotated270 = new char[rows][cols];

        for (int row = 0; row < matrix.length; row++) {
            for (int col = 0; col < matrix[row].length; col++) {
                char symbol = matrix[row][col];
                rotated270[rows - col - 1][row] = symbol;
            }
        }

        return rotated270;
    }